package org.jsp.cms.controller;

import org.jsp.cms.entity.Student;
import org.jsp.cms.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@RestController
@RequestMapping(value = "/students")
public class StudentController {

	@Autowired
	private StudentService studentService;

	@Operation(summary = "To Save All the Students according to User Id...", description = "This API will fetch the User Id and according to that User Id it will accept the  Student JSON Object and saves it to the Database Table and Returns the Saved Student Entity Object with the Id which is generated by User Id...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Student saved successfully..."),
			@ApiResponse(responseCode = "400", description = "Invalid User Id... Unable to save Student") })
	@PostMapping(value = "/students/{uid}")
	public ResponseEntity<?> saveStudent(@RequestBody Student student, @PathVariable int uid) {

		return studentService.saveStudent(student, uid);
	}

	@Operation(summary = "To upload photo to  Student By Id", description = "This API will Fetch the Student and upload profile photo based on Id  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "profile photo uploaded Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Student Present in the Database Table...") })
	@PostMapping("/upload/{sid}")
	public ResponseEntity<?> uploadPhoto(@PathVariable int sid, @RequestParam MultipartFile file) {

		return studentService.uploadPhoto(sid, file);
	}

	@Operation(summary = "To set Department to Student by Id", description = "This API will Fetch the Department and Student By Id  Available in the Database Table and set the Department to Student...")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Department set to Student successfully..."),
			@ApiResponse(responseCode = "404", description = "Invalid Department or Student Id... Unable to set Department to Student...") })
	@PatchMapping(value = "/department/{sid}/{did}")
	public ResponseEntity<?> setDepartmentToStudent(@PathVariable int sid, @PathVariable int did) {

		return studentService.setDepartmentToStudent(sid, did);
	}

	@Operation(summary = "To Fetch Student By Id", description = "This API will Fetch the Student By Id  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Student Found Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Student Present in the Database Table...") })
	@GetMapping(value = "/{id}")
	public ResponseEntity<?> findStudentById(@PathVariable int id) {
		return studentService.findStudentById(id);
	}

	@Operation(summary = "To Fetch All Students", description = "This API will Fetch All the Students  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "All the Students Found Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Student Present in the Database Table...") })
	@GetMapping
	public ResponseEntity<?> findAllStudents() {
		return studentService.findAllStudents();
	}

	@Operation(summary = "To Delete Student By Id", description = "This API will Fetch the Student and Delete By Id  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Student Deleted Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Student Present in the Database Table...") })
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<?> deleteStudentById(@PathVariable int id) {

		return studentService.deleteStudentById(id);
	}
}
