package org.jsp.cms.controller;

import org.jsp.cms.entity.Administrator;
import org.jsp.cms.service.AdministratorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@RestController
@RequestMapping(value = "/administrators")
public class AdministratorController {

	@Autowired
	private AdministratorService administratorService;

	@Operation(summary = "To Save All the Administrators according to User Id...", description = "This API will fetch the User Id and according to that User Id it will accept the  Administrator JSON Object and saves it to the Database Table and Returns the Saved Administrator Entity Object with the Id which is generated by User Id...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Administrator saved successfully..."),
			@ApiResponse(responseCode = "400", description = "Invalid User Id... Unable to save Administrator") })
	@PostMapping(value = "/{uid}")
	public ResponseEntity<?> saveAdministrator(@RequestBody Administrator administrator, @PathVariable int uid) {

		return administratorService.saveAdministrator(administrator, uid);
	}

	@Operation(summary = "To set Department to Administrator by Id", description = "This API will Fetch the Department and Administrator By Id  Available in the Database Table and set the Department to Administrator...")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Department set to Administrator successfully..."),
			@ApiResponse(responseCode = "404", description = "Invalid Department or Administrator Id... Unable to set Department to Administrator...") })
	@PatchMapping(value = "/{aid}/{did}")
	public ResponseEntity<?> setDepartmentToAdministrator(@PathVariable int aid, @PathVariable int did) {

		return administratorService.setDepartmentToAdministrator(aid, did);
	}

	@Operation(summary = "To Fetch All Administrators", description = "This API will Fetch All the Administrators  Available in the Database Table...")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "All the Administrators Found Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Administrator Present in the Database Table...") })
	@GetMapping
	public ResponseEntity<?> findAllAdministrators() {
		return administratorService.findAllAdministrators();
	}

	@Operation(summary = "To Fetch Administrator By Id", description = "This API will Fetch the Administrator By Id  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Administrator Found Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Administrator Present in the Database Table...") })
	@GetMapping(value = "/{id}")
	public ResponseEntity<?> findAdministratorById(@PathVariable int id) {
		return administratorService.findAdministratorById(id);
	}

	@Operation(summary = "To update the Administrator ...", description = "This API will accept an Administrator JSON Object and update according to Administrator and saves it to the Database Table and Returns the Saved Administrator Entity Object ...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Administrator updated successfully..."),
			@ApiResponse(responseCode = "400", description = "Invalid Administrator Id... Unable to update Administrator") })
	@PutMapping
	public ResponseEntity<?> updateAdministrator(@RequestBody Administrator administrator) {

		return administratorService.updateAdministrator(administrator);
	}

	@Operation(summary = "To Delete Administrator By Id", description = "This API will Fetch the Administrator and Delete By Id  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Administrator Deleted Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Administrator Present in the Database Table...") })
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<?> deleteAdministratorById(@PathVariable int id) {
		return administratorService.deleteAdministratorById(id);
	}

	@Operation(summary = "To upload photo to  Administrator By Id", description = "This API will Fetch the Administrator and upload profile photo based on Id  Available in the Database Table...")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "profile photo uploaded Successfully..."),
			@ApiResponse(responseCode = "404", description = "No Administrator Present in the Database Table...") })
	@PostMapping("/upload/{aid}")
	public ResponseEntity<?> uploadPhoto(@PathVariable int aid, @RequestParam MultipartFile file) {

		return administratorService.uploadPhoto(aid, file);
	}

}
